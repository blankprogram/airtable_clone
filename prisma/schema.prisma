// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Base {
  id         Int      @id @default(autoincrement())
  name       String   @default("Untitled Base")
  theme      String   @default("407c4a")
  tables     Table[]
  tableCount Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model Table {
  id       Int      @id @default(autoincrement())
  name     String
  rowCount Int      @default(0)
  base     Base     @relation(fields: [baseId], references: [id], onDelete: Cascade)
  baseId   Int
  columns  Column[]
  rows     Row[]
  views    View[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Column {
  id      Int        @id @default(autoincrement())
  name    String
  type    ColumnType
  table   Table      @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId Int
  cells   Cell[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Row {
  id      Int    @id @default(autoincrement())
  table   Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId Int
  cells   Cell[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cell {
  id       Int    @id @default(autoincrement())
  value    String @db.Text
  columnId Int
  rowId    Int
  Column   Column @relation(fields: [columnId], references: [id])
  Row      Row    @relation(fields: [rowId], references: [id])

  @@unique([rowId, columnId])
}

model View {
  id         Int      @id @default(autoincrement())
  name       String
  table      Table    @relation(fields: [tableId], references: [id])
  tableId    Int
  filters    Json     @default("{}")
  sorts      Json     @default("{}")
  hiddenCols Json     @default("[]")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum ColumnType {
  TEXT
  NUMBER
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bases         Base[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
